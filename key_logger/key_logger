#ifndef __KEY_LOGGER_H__
#define __KEY_LOGGER_H__

#include <functional>

#include "event_logger.h"
#include "event_callback.h"
#include "event_container.h"
#include "key_str.h"
#include "event.h"


namespace event {

namespace key {
    typedef std::vector<key::code>              vector;
    typedef std::queue<key::code>               queue;
    typedef std::deque<key::code>               deque;
    typedef std::array<bool, key::code_size>    array;
    typedef std::bitset<key::code_size>         bitset;
}

namespace action {
    typedef std::vector<action::code>           vector;
    typedef std::queue<action::code>            queue;
    typedef std::deque<action::code>            deque;
}


namespace key {
    template <std::size_t... _Mask>
    class __key_logger
#ifdef _APPL
: public __logger<key::code, action::code, kCGEventFlagsChanged, _Mask...> {
#else
    : public __logger<key::code, action::code, _Mask...> {
#endif
    private:
#ifdef _APPL
        typedef __logger<key::code, action::code, kCGEventFlagsChanged, _Mask...> _Base;
#else
        typedef __logger<key::code, action::code, _Mask...> _Base;
#endif
        typedef typename _Base::event_field     event_field;
        typedef typename _Base::event_type      event_type;
        typedef typename _Base::event_ref       event_ref;
        
    protected:
        __key_logger();
        virtual ~__key_logger() = default;
        virtual void __key_callback(const key::code&, const action::code&) = 0;
        
    public:
        inline bool is_running();
        
    private:
        void __callback_(const event_type&, const event_ref&) override;
    };
    
    
    template <std::size_t... _Mask>
    __key_logger<_Mask...>::__key_logger() {
#ifdef _APPL
        /* Undefined */
#elif defined _WIN
        _Base::__set_field(WH_KEYBOARD_LL);
#endif
    }
    
    template <std::size_t... _Mask>
    bool __key_logger<_Mask...>::is_running() {
        return _Base::__s_;
    }
    
    template <std::size_t... _Mask>
    void __key_logger<_Mask...>::__callback_(const event_type& __t, const event_ref& __e) {
#ifdef _APPL
        CGKeyCode __kc = (CGKeyCode)CGEventGetIntegerValueField(__e, kCGKeyboardEventKeycode);
        const key::code __k = (key::code)__kc;
        const action::code __a = (action::code)__t;
        __key_callback(__k, __a);
#elif defined _WIN
        const key::code __k = (key::code)((PKBDLLHOOKSTRUCT)__e)->vkCode;
        const action::code __a = (action::code)__t;
        __key_callback(__k, __a);
#endif
    }
    
    
    template <>
    class __key_logger <>
    : public __logger<key::code, action::code> {
    private:
        typedef __logger<key::code, action::code>       _Base;
        typedef typename _Base::event_field event_field;
        typedef typename _Base::event_type  event_type;
        typedef typename _Base::event_ref   event_ref;
        
    protected:
        __key_logger() = default;
        virtual ~__key_logger() = default;
        virtual void __key_callback(const key::code&, const action::code&) = 0;
        
    public:
        inline bool is_running();
        
    private:
        void __callback_(const event_type&, const event_ref&) override;
    };
    
    
    bool __key_logger<>::is_running() {
        return _Base::__s_;
    }
    
    void __key_logger<>::__callback_(const event_type& __t, const event_ref& __e) { /* Undefined */ }
    
    
    template <typename _ConT, typename _FuncT, std::size_t... _Mask>
    class logger
    : public __key_logger<_Mask...>, public callback<_FuncT, _Mask...>, public container<_ConT> {
    private:
        typedef __key_logger<_Mask...>              _Base;
        typedef callback<_FuncT, _Mask...>          _Callback;
        typedef container<_ConT>                    _Container;
    public:
        typedef typename _Callback::callback_type   callback_type;
        typedef typename _Container::container_type container_type;
        
    public:
        logger() = default;
        ~logger() = default;
        
    protected:
        void __key_callback(const key::code&, const action::code&) final;
    };
    
    
    template <typename _ConT, typename _FuncT, std::size_t... _Mask>
    void logger<_ConT, _FuncT, _Mask...>::__key_callback(const key::code& __k, const action::code& __a) {
        _Callback::invoke(__k, __a);
        _Container::push(__k, __a);
    }
    
    
    template <typename _FuncT, std::size_t... _Mask>
    class logger <void, _FuncT, _Mask...>
    : public __key_logger<_Mask...>, public callback<_FuncT, _Mask...> {
    private:
        typedef __key_logger<_Mask...>              _Base;
        typedef callback<_FuncT, _Mask...>          _Callback;
    public:
        typedef typename _Callback::callback_type   callback_type;
        
    public:
        logger() = default;
        ~logger() = default;
        
    protected:
        void __key_callback(const key::code&, const action::code&) final;
    };
    
    
    template <typename _FuncT, std::size_t... _Mask>
    void logger<void, _FuncT, _Mask...>::__key_callback(const key::code& __k, const action::code& __a) {
        _Callback::invoke(__k, __a);
    }
    
    
    template <typename _ConT, std::size_t... _Mask>
    class logger <_ConT, void, _Mask...>
    : public __key_logger<_Mask...>, public container<_ConT> {
    private:
        typedef __key_logger<_Mask...>              _Base;
        typedef container<_ConT>                    _Container;
    public:
        typedef typename _Container::container_type container_type;
        
    public:
        logger() = default;
        ~logger() = default;
        
    protected:
        void __key_callback(const key::code&, const action::code&) final;
    };
    
    
    template <typename _ConT, std::size_t... _Mask>
    void logger<_ConT, void, _Mask...>::__key_callback(const key::code& __k, const action::code& __a) {
        _Container::push(__k, __a);
    }
    
    
    template <std::size_t... _Mask>
    class logger <void, void, _Mask...>
    : public __key_logger<_Mask...> {
    private:
        typedef __key_logger<_Mask...> _Base;
        
    public:
        logger() = default;
        ~logger() = default;
        
    protected:
        virtual void __key_callback(const key::code&, const action::code&) override;
    };
    
    
    template <std::size_t... _Mask>
    void logger<void, void, _Mask...>::__key_callback(const key::code&, const action::code&) { /* Undefined */ }
    
    
    template <typename _T, std::size_t _Size, typename _FuncT>
    class logger <std::array<_T, _Size>, _FuncT, action::code::key_down, action::code::key_up>
    : public __key_logger<action::code::key_down, action::code::key_up>,
    public callback<_FuncT, action::code::key_down, action::code::key_up>,
    public container<std::array<_T, _Size>> {
    private:
        typedef __key_logger<action::code::key_down, action::code::key_up> _Base;
        typedef event::callback<_FuncT, action::code::key_down, action::code::key_up> _Callback;
        typedef container<std::array<_T, _Size>>    _Container;
    public:
        typedef typename _Callback::callback_type   callback_type;
        typedef typename _Container::container_type container_type;
        
    public:
        logger() = default;
        ~logger() = default;
        
        bool is_pressed(key::code);
        
    protected:
        void __key_callback(const key::code&, const action::code&) final;
        void push(const key::code&, const action::code&) override;
    };
    
    
    template <typename _T, std::size_t _Size, typename _FuncT>
    bool logger<std::array<_T, _Size>, _FuncT, action::code::key_down, action::code::key_up>
    ::is_pressed(key::code __k) {
        return _Container::at(__k);
    }
    
    template <typename _T, std::size_t _Size, typename _FuncT>
    void logger<std::array<_T, _Size>, _FuncT, action::code::key_down, action::code::key_up>
    ::__key_callback(const key::code& __k, const action::code& __a) {
        _Callback::invoke(__k, __a);
        push(__k, __a);
    }
    
    template <typename _T, std::size_t _Size, typename _FuncT>
    void logger<std::array<_T, _Size>, _FuncT, action::code::key_down, action::code::key_up>
    ::push(const key::code& __k, const action::code& __a) {
        if (__a == action::code::key_down) {
            _Container::__c_[__k] = (_T)1;
        }
        else if (__a == action::code::key_up) {
            _Container::__c_[__k] = (_T)0;
        }
    }
    
    
    template <typename _T, std::size_t _Size>
    class logger <std::array<_T, _Size>, void, action::code::key_down, action::code::key_up>
    : public __key_logger<action::code::key_down, action::code::key_up>,
    public container<std::array<_T, _Size>> {
    private:
        typedef __key_logger<action::code::key_down, action::code::key_up> _Base;
        typedef container<std::array<_T, _Size>> _Container;
    public:
        typedef typename _Container::container_type container_type;
        
    public:
        logger() = default;
        ~logger() = default;
        
        bool is_pressed(key::code);
        
    protected:
        void __key_callback(const key::code&, const action::code&) final;
        void push(const key::code&, const action::code&) override;
    };
    
    
    template <typename _T, std::size_t _Size>
    bool logger<std::array<_T, _Size>, void, action::code::key_down, action::code::key_up>
    ::is_pressed(key::code __k) {
        return _Container::at(__k);
    }
    
    template <typename _T, std::size_t _Size>
    void logger<std::array<_T, _Size>, void, action::code::key_down, action::code::key_up>
    ::__key_callback(const key::code& __k, const action::code& __a) {
        push(__k, __a);
    }
    
    template <typename _T, std::size_t _Size>
    void logger<std::array<_T, _Size>, void, action::code::key_down, action::code::key_up>
    ::push(const key::code& __k, const action::code& __a) {
        if (__a == action::code::key_down) {
            _Container::__c_[__k] = (_T)1;
        }
        else if (__a == action::code::key_up) {
            _Container::__c_[__k] = (_T)0;
        }
    }
    
    
    template <std::size_t _Size, typename _FuncT>
    class logger <std::bitset<_Size>, _FuncT, action::code::key_down, action::code::key_up>
    : public __key_logger<action::code::key_down, action::code::key_up>,
    public callback<_FuncT, action::code::key_down, action::code::key_up>,
    public container<std::bitset<_Size>> {
    private:
        typedef __key_logger<action::code::key_down, action::code::key_up> _Base;
        typedef event::callback<_FuncT, action::code::key_down, action::code::key_up> _Callback;
        typedef container<std::bitset<_Size>>       _Container;
    public:
        typedef typename _Callback::callback_type   callback_type;
        typedef typename _Container::container_type container_type;
        
    public:
        logger() = default;
        ~logger() = default;
        
        bool is_pressed(key::code);
        
    protected:
        void __key_callback(const key::code&, const action::code&) final;
        void push(const key::code&, const action::code&) override;
    };
    
    
    template <std::size_t _Size, typename _FuncT>
    bool logger<std::bitset<_Size>, _FuncT, action::code::key_down, action::code::key_up>
    ::is_pressed(key::code __k) {
        return _Container::at(__k);
    }
    
    template <std::size_t _Size, typename _FuncT>
    void logger<std::bitset<_Size>, _FuncT, action::code::key_down, action::code::key_up>
    ::__key_callback(const key::code& __k, const action::code& __a) {
        _Callback::invoke(__k, __a);
        push(__k, __a);
    }
    
    template <std::size_t _Size, typename _FuncT>
    void logger<std::bitset<_Size>, _FuncT, action::code::key_down, action::code::key_up>
    ::push(const key::code& __k, const action::code& __a) {
        if (__a == action::code::key_down) {
            _Container::__c_[__k] = true;
        }
        else if (__a == action::code::key_up) {
            _Container::__c_[__k] = false;
        }
    }
    
    
    template <std::size_t _Size>
    class logger <std::bitset<_Size>, void, action::code::key_down, action::code::key_up>
    : public __key_logger<action::code::key_down, action::code::key_up>,
    public container<std::bitset<_Size>> {
    private:
        typedef __key_logger<action::code::key_down, action::code::key_up> _Base;
        typedef container<std::bitset<_Size>>       _Container;
    public:
        typedef typename _Container::container_type container_type;
        
    public:
        logger() = default;
        ~logger() = default;
        
        bool is_pressed(key::code);
        
    protected:
        void __key_callback(const key::code&, const action::code&) final;
        void push(const key::code&, const action::code&) override;
    };
    
    
    template <std::size_t _Size>
    bool logger<std::bitset<_Size>, void, action::code::key_down, action::code::key_up>
    ::is_pressed(key::code __k) {
        return _Container::at(__k);
    }
    
    template <std::size_t _Size>
    void logger<std::bitset<_Size>, void, action::code::key_down, action::code::key_up>
    ::__key_callback(const key::code& __k, const action::code& __a) {
        push(__k, __a);
    }
    
    template <std::size_t _Size>
    void logger<std::bitset<_Size>, void, action::code::key_down, action::code::key_up>
    ::push(const key::code& __k, const action::code& __a) {
        if (__a == action::code::key_down) {
            _Container::__c_[__k] = true;
        }
        else if (__a == action::code::key_up) {
            _Container::__c_[__k] = false;
        }
    }
    
}
}
#endif /* __KEY_LOGGER_H__ */
